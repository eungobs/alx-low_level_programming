
‪Eunice Ngobeni‬ <eungobs@gmail.com>
00:29 (20 minutes ago)
to me

#include <elf.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>

void check_elf(unsigned char *e_ident);
void print_magic(unsigned char *e_ident);
void print_class(unsigned char *e_ident);
void print_data(unsigned char *e_ident);
void print_version(unsigned char *e_ident);
void print_abi(unsigned char *e_ident);
void print_osabi(unsigned char *e_ident);
void print_type(unsigned int e_type, unsigned char *e_ident);
void print_entry(unsigned long int e_entry, unsigned char *e_ident);
void close_elf(int elf);

/**
* check_elf - Checks if a file is an ELF file.
* @e_ident: A pointer to an array containing the ELF magic numbers.
*
* Description: If the file is not an ELF file - exit code 98.
*/
void check_elf(unsigned char *e_ident)
{
int index;

for (index = 0; index < 4; index++)
{
if (e_ident[index] != 127 &&
    e_ident[index] != 'E' &&
    e_ident[index] != 'L' &&
    e_ident[index] != 'F')
{
dprintf(STDERR_FILENO, "Error: Not an ELF file ");
exit(98);
}
}
}

/**
* print_magic - Prints the magic numbers of an ELF header.
* @e_ident: A pointer to an array containing the ELF magic numbers.
*
* Description: Magic numbers are separated by spaces.
*/
void print_magic(unsigned char *e_ident)
{
int index;

printf("  Magic:   ");

for (index = 0; index < EI_NIDENT; index++)
{
printf("%02x", e_ident[index]);

if (index == EI_NIDENT - 1)
printf(" ");
else
printf(" ");
}
}

/**
* print_class - Prints the class of an ELF header.
* @e_ident: A pointer to an array containing the ELF class.
*/
void print_class(unsigned char *e_ident)
{
printf("  Class:                             ");

switch (e_ident[EI_CLASS])
{
case ELFCLASSNONE:
printf("none ");
break;
case ELFCLASS32:
printf("ELF32 ");
break;
case ELFCLASS64:
printf("ELF64 ");
break;
default:
printf("<unknown: %x> ", e_ident[EI_CLASS]);
}
}

/**
* print_data - Prints the data of an ELF header.
* @e_ident: A pointer to an array containing the ELF class.
*/
void print_data(unsigned char *e_ident)
{
printf("  Data:                              ");

switch (e_ident[EI_DATA])
{
case ELFDATANONE:
printf("none ");
break;
case ELFDATA2LSB:
printf("2's complement, little endian ");
break;
case ELFDATA2MSB:
printf("2's complement, big endian ");
break;
default:
printf("<unknown: %x> ", e_ident[EI_CLASS]);
}
}

/**
* print_version - Prints the version of an ELF header.
* @e_ident: A pointer to an array containing the ELF version.
*/
void print_version(unsigned char *e_ident)
{
printf("  Version:                           %d",
       e_ident[EI_VERSION]);

switch (e_ident[EI_VERSION])
{
case EV_CURRENT:
printf(" (current) ");
break;
default:
printf(" ");
break;
}
}

/**
* print_osabi - Prints the OS/ABI of an ELF header.
* @e_ident: A pointer to an array containing the ELF version.
*/
void print_osabi(unsigned char *e_ident)
{
printf("  OS/ABI:                            ");

switch (e_ident[EI_OSABI])
{
case ELFOSABI_NONE:
printf("UNIX - System V ");
break;
case ELFOSABI_HPUX:
printf("UNIX - HP-UX ");
break;
case ELFOSABI_NETBSD:
printf("UNIX - NetBSD ");
break;
case ELFOSABI_LINUX:
printf("UNIX - Linux ");
break;
case ELFOSABI_SOLARIS:
printf("UNIX - Solaris ");
break;
case ELFOSABI_IRIX:
printf("UNIX - IRIX ");
break;
case ELFOSABI_FREEBSD:
printf("UNIX - FreeBSD ");
break;
case ELFOSABI_TRU64:
printf("UNIX - TRU64 ");
break;
case ELFOSABI_ARM:
printf("ARM ");
break;
case ELFOSABI_STANDALONE:
printf("Standalone App ");
break;
default:
printf("<unknown: %x> ", e_ident[EI_OSABI]);
}
}

/**
* print_abi - Prints the ABI version of an ELF header.
* @e_ident: A pointer to an array containing the ELF ABI version.
*/
void print_abi(unsigned char *e_ident)
{
printf("  ABI Version:                       %d ",
       e_ident[EI_ABIVERSION]);
}

/**
* print_type - Prints the type of an ELF header.
* @e_type: The ELF type.
* @e_ident: A pointer to an array containing the ELF class.
*/
void print_type(unsigned int e_type, unsigned char *e_ident)
{
if (e_ident[EI_DATA] == ELFDATA2MSB)
e_type >>= 8;

printf("  Type:                              ");

switch (e_type)
{
case ET_NONE:
printf("NONE (None) ");
break;
case ET_REL:
printf("REL (Relocatable file) ");
break;
case ET_EXEC:
printf("EXEC (Executable file) ");
break;
case ET_DYN:
printf("DYN (Shared object file) ");
break;
case ET_CORE:
printf("CORE (Core file) ");
break;
default:
printf("<unknown: %x> ", e_type);
}
}

/**
* print_entry - Prints the entry point of an ELF header.
* @e_entry: The address of the ELF entry point.
* @e_ident: A pointer to an array containing the ELF class.
*/
void print_entry(unsigned long int e_entry, unsigned char *e_ident)
{
printf("  Entry point address:               ");

if (e_ident[EI_DATA] == ELFDATA2MSB)
{
e_entry = ((e_entry << 8) & 0xFF00FF00) |
  ((e_entry >> 8) & 0xFF00FF);
e_entry = (e_entry << 16) | (e_entry >> 16);
}

if (e_ident[EI_CLASS] == ELFCLASS32)
printf("%#x ", (unsigned int)e_entry);

else
printf("%#lx ", e_entry);
}

/**
* close_elf - Closes an ELF file.
* @elf: The file descriptor of the ELF file.
*
* Description: If the file cannot be closed - exit code 98.
*/
void close_elf(int elf)
{
if (close(elf) == -1)
{
dprintf(STDERR_FILENO,
"Error: Can't close fd %d ", elf);
exit(98);
}
}

/**
* main - Displays the information contained in the
*        ELF header at the start of an ELF file.
* @argc: The number of arguments supplied to the program.
* @argv: An array of pointers to the arguments.
*
* Return: 0 on success.
*
* Description: If the file is not an ELF File or
*              the function fails - exit code 98.
*/
int main(int __attribute__((__unused__)) argc, char *argv[])
{
Elf64_Ehdr *header;
int o, r;

o = open(argv[1], O_RDONLY);
if (o == -1)
{
dprintf(STDERR_FILENO, "Error: Can't read file %s ", argv[1]);
exit(98);
}
header = malloc(sizeof(Elf64_Ehdr));
if (header 
